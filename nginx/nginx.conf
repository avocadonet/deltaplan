# Определение апстрима для бэкенда.
# Имя 'backend' соответствует тому, что используется в proxy_pass.
upstream backend {
    # 'backend_prod' — это имя сервиса из docker-compose.prod.yml.
    # Docker обеспечивает разрешение этого имени в IP-адрес контейнера.
    server backend_prod:8000;
}

server {
    listen 80;

    # Мы уберем server_name, чтобы Nginx отвечал на любой хост,
    # включая ваш IP 192.168.51.41. Либо можно явно его сюда добавить.
    # server_name localhost 127.0.0.1 192.168.51.41;
    # Но для отладки проще оставить пустым, чтобы он отвечал на всё.
    server_name _; 

    # Обработка API-запросов
    location /api/ {
        proxy_pass http://backend; # Перенаправляем на апстрим

        # --- Ключевые изменения здесь ---
        # Эти заголовки критически важны для Django, чтобы он
        # правильно определял 'origin' для CORS и другие данные.

        # 1. Host header: Передает оригинальный хост, который запросил клиент.
        # Например, '192.168.51.41:8080'. Без этого Django будет думать,
        # что запрос пришел от 'backend_prod:8000', и CORS не сработает.
        proxy_set_header Host $http_host; 

        # 2. X-Real-IP: Передает реальный IP-адрес клиента.
        proxy_set_header X-Real-IP $remote_addr;

        # 3. X-Forwarded-For: Список IP-адресов в цепочке прокси.
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # 4. X-Forwarded-Proto: Сообщает бэкенду, был ли оригинальный запрос http или https.
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_redirect off;
    }

    # Раздача статических файлов Django (например, из админки)
    location /static/ {
        alias /app/deltaplan/static/;
    }

    # Раздача медиафайлов (загруженных пользователями)
    location /media/ {
        alias /app/deltaplan/media/;
    }

    # Раздача фронтенда (Flutter Web)
    location / {
        root /usr/share/nginx/html;
        index index.html;
        try_files $uri $uri/ /index.html;
    }
}
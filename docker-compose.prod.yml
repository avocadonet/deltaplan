version: '3.8'

services:
  postgres_prod:
    image: postgres:15-alpine
    container_name: deltaplan_db_prod
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    env_file:
      - ./backend/.env.prod
    # Добавляем healthcheck, как в dev-версии!
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - deltaplan_net_prod

  backend_prod:
    build:
      context: . # Контекст сборки - корень проекта
      dockerfile: backend/Dockerfile.prod # Путь к Dockerfile
    container_name: deltaplan_backend_prod
    # ВАЖНО: Обновленная команда запуска
    command: >
      sh -c "python deltaplan/manage.py migrate --no-input &&
             python deltaplan/manage.py collectstatic --no-input &&
             gunicorn deltaplan.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      # ВАЖНО: Обновленные пути
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    env_file:
      - ./backend/.env_prod
    depends_on:
      postgres_prod:
        # Ждем, пока БД будет полностью готова
        condition: service_healthy
    restart: always
    networks:
      - deltaplan_net_prod

  nginx:
    image: nginx:1.25-alpine
    container_name: deltaplan_nginx_prod
    # Используем стандартные порты
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # Важно: монтируем как read-only для безопасности
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./frontend/build/web:/usr/share/nginx/html:ro
      # ВАЖНО: Обновленные пути
      - static_volume:/app/staticfiles:ro
      - media_volume:/app/media:ro
    depends_on:
      - backend_prod
    restart: always
    networks:
      - deltaplan_net_prod

volumes:
  postgres_data_prod:
  static_volume:
  media_volume:

networks:
  deltaplan_net_prod:
    driver: bridge
    name: deltaplan_net_prod
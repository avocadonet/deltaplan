services:
  postgres_prod:
    image: postgres:15-alpine
    container_name: deltaplan_db_prod
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    env_file:
      - ./backend/.env_prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - deltaplan_net_prod

  backend_prod:
    build:
      context: .
      dockerfile: backend/Dockerfile.prod
    container_name: deltaplan_backend_prod
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    env_file:
      - ./backend/.env_prod
    depends_on:
      postgres_prod:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/api/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: always
    networks:
      - deltaplan_net_prod

  nginx:
    image: nginx:1.25-alpine
    container_name: deltaplan_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./frontend/build/web:/usr/share/nginx/html:ro
      - static_volume:/app/staticfiles:ro
      - media_volume:/app/media:ro
      - certbot_conf:/etc/letsencrypt:ro
      - certbot_www:/var/www/certbot:ro
    depends_on:
      backend_prod:
        condition: service_healthy
    restart: always
    networks:
      - deltaplan_net_prod

  certbot:
    image: certbot/certbot
    container_name: deltaplan_certbot_prod
    volumes:
      - certbot_conf:/etc/letsencrypt
      - certbot_www:/var/www/certbot

volumes:
  postgres_data_prod:
  static_volume:
  media_volume:
  certbot_conf:
  certbot_www:

networks:
  deltaplan_net_prod:
    driver: bridge
    name: deltaplan_net_prod
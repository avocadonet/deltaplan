# --- Этап 1: Сборщик зависимостей ---
FROM python:3.11-slim-bookworm AS builder

WORKDIR /app_builder
# Устанавливаем зависимости для сборки пакетов, которые могут их требовать
RUN apt-get update && apt-get install -y --no-install-recommends build-essential libpq-dev
COPY requirements.txt .
# Собираем "колеса" для быстрой установки
RUN pip wheel --no-cache-dir --wheel-dir /wheels -r requirements.txt


# --- Этап 2: Финальный образ ---
FROM python:3.11-slim-bookworm

# Устанавливаем переменные окружения
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# Рабочая директория
WORKDIR /app

# Создаем пользователя без root-прав
RUN addgroup --system app && adduser --system --ingroup app app

# Устанавливаем зависимости, которые могут понадобиться во время выполнения (например, для Pillow)
RUN apt-get update && apt-get install -y --no-install-recommends libjpeg-dev zlib1g-dev && rm -rf /var/lib/apt/lists/*

# Копируем "колеса" и устанавливаем их
COPY --from=builder /wheels /wheels
RUN pip install --no-cache /wheels/*.whl

# Копируем исходный код приложения
COPY ./backend .

# Создаем директории для статики и медиа и назначаем права
# ВАЖНО: Используем путь /app/staticfiles, а не /app/deltaplan/static
RUN mkdir -p /app/staticfiles /app/media && \
    chown -R app:app /app/staticfiles /app/media

# Передаем владение всем приложением пользователю 'app'
RUN chown -R app:app /app

# Переключаемся на пользователя 'app'
USER app

# Открываем порт
EXPOSE 8000

# CMD будет переопределен в docker-compose.yml
CMD ["gunicorn", "deltaplan.wsgi:application", "--bind", "0.0.0.0:8000"]